{
	"nodes":[
		{"id":"f529ab627df63813","type":"group","x":-1752,"y":3198,"width":10776,"height":1116,"label":"Lumber"},
		{"id":"5dec0b1fb5521ed2","type":"group","x":-1748,"y":2278,"width":10820,"height":411,"color":"1","label":"Tasklists, commits"},
		{"id":"2ddfb2e9e25bcb8b","type":"group","x":1646,"y":84,"width":428,"height":843,"color":"6","label":"Template/components inside"},
		{"id":"9bec5ad71eb38e89","type":"group","x":-1,"y":417,"width":319,"height":212,"color":"4","label":"Build States Spool"},
		{"id":"0036edc273576391","type":"group","x":159,"y":-278,"width":346,"height":168,"label":"Untitled group"},
		{"id":"ddbae2f80e43ed21","type":"group","x":369,"y":50,"width":363,"height":159,"color":"1","label":"Bloodflow, Breathe"},
		{"id":"08e12e2a9be02f3d","type":"group","x":-1476,"y":364,"width":235,"height":236,"color":"5","label":"_Entry point"},
		{"id":"6fb6de0034898a3c","type":"text","text":"# prateekshasingh@Prateekshas-Air tria_leshp_svelte_v0.3 % git log\n\n\n- [x] start list some helpers ✅ 2024-08-03\n- [x] list data ✅ 2024-08-03\n- [x] list components ✅ 2024-08-03\n\n\ncommit 1765e555506f2fca652496a5cdf34f0ef6975d65 (HEAD -> main)\nAuthor: Prateeksha Singh <pratu16x7@gmail.com>\nDate:   Sat Aug 3 11:40:52 2024 -0400\n\n- [x] add data spool, AND MAKE OBSIDIAN SHOW IT IN CANVAS ✅ 2024-08-03\n\n\n\ncommit 84b614be92901b9643073b5d46f72641ff95048e (HEAD -> main)\nAuthor: Prateeksha Singh <pratu16x7@gmail.com>\nDate:   Sat Aug 3 10:50:35 2024 -0400\n\n- [x] bring project into Obsidian Dropbox vault, put node modules up the tree outside the vault, let vite know that directory, will need to update node modules the hard way but whatever, add a counter elem to ensure stuff works. Next up, read git logs inObsidian too ✅ 2024-08-03\n\ncommit 9c9ff33dc756d386155ec806b5ce2641c2911bc7\nAuthor: Prateeksha Singh <pratu16x7@gmail.com>\nDate:   Tue Jul 23 18:41:03 2024 -0400\n\n- [x] second commit: npm install - added 220 packages, 91.4 mb and package-lock.json ✅ 2024-08-03\n\ncommit 2a7958ca3a6bb87741e0f624f97247503c281c25\nAuthor: Prateeksha Singh <pratu16x7@gmail.com>\nDate:   Tue Jul 23 18:38:09 2024 -0400\n\n- [x] first commit: npm init svelte - barebones: esline, prettier, no npm install or run dev yet ✅ 2024-08-03","x":-658,"y":2298,"width":519,"height":1064},
		{"id":"f183397fea5c4056","type":"file","file":"Lumber/Creations, actual digi ones, metadata for real world ones/z_ashes/_current_tria_leshp/helpers_then_data_diag.excalidraw.md","x":-730,"y":1109,"width":716,"height":707},
		{"id":"0413f01daa9df5d6","type":"text","text":"# Readme\n\n\n#i-come-alive #creation \n\n#professional\n\n\n- [x] basic program and frames\n- [x] basic stages ✅ 2024-07-20\n- [x] plan 1 (LESHP trail, leading to system diagram, data-first diagram) ✅ 2024-07-20\n- [x] plan 2 (leading to desire for make data before helpers) ✅ 2024-07-20\n- [x] plan 3 (helper-first diagram, just to get idea of input and ouputs and stages need, and reinforce requirement of mock data) ✅ 2024-07-20 #mock-data-before-helpers-though #helpers-are-awesome \n- [x] setup the figma and canvas for mock data: [[anim_frames, possible representations, their requirements, thoughts to reach the holy grail STATE spool, aka research.canvas]] ✅ 2024-07-20\n- [ ] **mock data - figma plan**: [[anim_frames, possible representations, their requirements, thoughts to reach the holy grail STATE spool, aka research.canvas]]\n\t- [ ] \n- [ ] **mock data - json plan**: [[anim_frames, possible representations, their requirements, thoughts to reach the holy grail STATE spool, aka research.canvas]]\n\t- [ ] _\n- [ ] starter file from scratch\n\t- [ ] _\n- [ ] _\n- [ ] _\n- [ ] the first test helper, just to convert prog to json\n- [ ] _\n- [ ] **Svelte trial runs and branches**: [[_Svelte.canvas|Svelte]]\n\t- [ ] _\n- [ ] make the component that takes a state\n- [ ] \n- [ ] **Acorn trial runs and branches**: [[(liminal) ASTs, compilers, parsers, Acorn JS.canvas|compilers, parsers, Acorn JS]]\n\t- [ ] _\n- [ ] _\n- [ ] \n- [ ] the first helper, just to convert prog to json\n- [ ] the first helper, just to feed json into component\n- [ ] _\n- [ ] \n\n\n\n\n\n----\ntria_2 tests, with chatGPT, other methods, explore and try our for loop programs\n\nuse chatGPT to learn how to do this\n\n- [x] initial data flow/data need plan\n- [x] list approaches to do the debugger, line by line scope, get a series of scope snapshots ✅ 2024-07-14\n- [x] basic almost parse line by line ✅ 2024-07-14\n\t- [x] normal single html/js file ✅ 2024-07-14\n\t- [x] svelte app ✅ 2024-07-14\n- [x] continue on normal file ✅ 2024-07-17\n-  ~~\\*\\*fix parser [[(liminal) ASTs, compilers, parsers, Acorn JS.canvas|compilers, parsers, Acorn JS]]~~\n- [x] **GET A REAL PROGRAM AND use it as northstar to MAKE IT WORK** ✅ 2024-07-18\n- [x] think on how to Store the states and statements in a JSon list of snapshots ✅ 2024-07-18\n\n----\n- [ ] beased on the program, add inferences to the state list elements. This infor can be in every elem, or as a separate part from the list, but same json.\n\t- [ ] The Json should allow to reacreate the moview reel, should have all the info for it.\n- [ ] Separate the deduction flow loop into stages: **get the jsons, and only very crude svgs derived from the json. Json will tell us the data format, and is easy to iterate**  \n\t- [ ] primary values/variables\n\t- [ ] computed values\n\t- [ ] computed state (for eg loop condiiton, if/else block)\n\t\t- [ ] need which block you're inside to keep track of the state while doing mundane things\n\t\t- [ ] **changing state and checking state are two different program modes** mood lighting should change when making imp decsion or updating imp variables\n\t- [ ] record all this info in a snapshot json, add to all the snapshots of the program\n- [ ] **Ask chatGPT to write the code for each stage**\n\n\n----\n\ntria_2 tests, with chatGPT, other methods, explore and try our for loop programs","x":-1315,"y":2171,"width":494,"height":1364,"color":"5"},
		{"id":"6229b0e4640c7bcd","type":"text","text":"intermediate / temp / computed values","x":1765,"y":669,"width":250,"height":60},
		{"id":"25210689c192bef1","type":"text","text":"# Template - say for Arrays","x":957,"y":593,"width":250,"height":60,"color":"6"},
		{"id":"63da4c3f64d536ae","type":"text","text":"# STATE / MODE","x":1729,"y":544,"width":250,"height":60,"color":"6"},
		{"id":"c9a0e2ff97d09ae0","type":"text","text":"# Current Spool item","x":936,"y":467,"width":250,"height":60,"color":"6"},
		{"id":"4adf49d1c2013b34","type":"text","text":"# Output / Res","x":1785,"y":430,"width":250,"height":60,"color":"6"},
		{"id":"007e54a52fdd314a","type":"text","text":"# Function preview","x":939,"y":323,"width":250,"height":60,"color":"6"},
		{"id":"ca37dd5e8390588b","type":"file","file":"Lumber/Creations, actual digi ones, metadata for real world ones/z_ashes/_current_tria_leshp/UI, Page, components.excalidraw.md","x":1352,"y":-1455,"width":990,"height":971},
		{"id":"1c151be3eba3becb","type":"text","text":"# Player - aka DS, say Array","x":1666,"y":104,"width":250,"height":60,"color":"6"},
		{"id":"57328441252f0c08","type":"text","text":"# input","x":1726,"y":240,"width":250,"height":60,"color":"6"},
		{"id":"95784cfd844eb626","type":"text","text":"# The Blood Flow - Make it Breathe\nwith bare minimum single char fake data\nData then helpers diagram","x":381,"y":64,"width":248,"height":119,"color":"1"},
		{"id":"eb28d297c9dad52f","type":"text","text":"# get AST","x":-256,"y":117,"width":250,"height":60,"color":"4"},
		{"id":"a2497144037e1f04","type":"text","text":"# Function text","x":307,"y":-258,"width":178,"height":128,"color":"1"},
		{"id":"c5a18b336ddbdf6f","type":"text","text":"Sample function","x":179,"y":-238,"width":63,"height":71,"color":"3"},
		{"id":"8543f3c461e5eed4","type":"text","text":"# PAGE","x":-961,"y":-233,"width":234,"height":1054,"color":"6"},
		{"id":"fbda8f10797a58f0","type":"file","file":"Lumber/Creations, actual digi ones, metadata for real world ones/z_ashes/_current_tria_leshp/tria_leshp_svelte_v0.3/src/data/Spool, STATE - Start from a frame. MANY frames, and keep adding to it.md","x":623,"y":972,"width":251,"height":400},
		{"id":"ca7e1c6a47c55d11","type":"text","text":"# Spool, STATE - Start from a frame. MANY frames, and keep adding to it. \n\n***You cannot hide.***\nBe a pro. Be comprehensive.\n\nvar data, modes, messages, temp or intermediate or computed data\n```preview\npath: Lumber/Creations, actual digi ones, metadata for real world ones/z_ashes/_current_tria_leshp/tria_leshp_svelte_v0.3/src/data/sample_spool.json\n```\n\n\n- players(input or main ds): value/state type, \n- canvas: areas, modes, \n- messages\n- ... okay this is stupid, start from the frames, as usual \n\t- spell out the data needed to render it.\n\n***What is the story you want to tell?***","x":439,"y":651,"width":266,"height":564,"color":"1"},
		{"id":"a8330914b7bf323d","type":"text","text":"get vars, get modes, get temp values","x":44,"y":528,"width":250,"height":60},
		{"id":"7f2d0b35c1cb7ac1","type":"text","text":"# get States Spool","x":24,"y":443,"width":250,"height":60,"color":"4"},
		{"id":"c3069030d7a0940d","type":"link","url":"https://www.figma.com/proto/gmmY6RWuStZm4WTh0Gpyv2/tria_leshp?node-id=1-34&t=mZ68zVK8sb2aL8WZ-1","x":-2590,"y":-1508,"width":1986,"height":1070},
		{"id":"06e63afd5912f75a","type":"text","text":"# app.html","x":-1456,"y":384,"width":85,"height":91},
		{"id":"8066cbe81d396a8d","type":"text","text":"# App.ts","x":-1348,"y":411,"width":87,"height":156},
		{"id":"b4e0866e71e28d44","type":"text","text":"# app.css","x":-1453,"y":492,"width":97,"height":88},
		{"id":"49217f5b3cf3c5f8","type":"link","url":"http://localhost:5173","x":-566,"y":-1688,"width":1840,"height":1340},
		{"id":"65f5c4fbd4c8028d","type":"link","url":"https://youtu.be/jKnRgsoO2ME?feature=shared","x":7111,"y":-1384,"width":673,"height":385},
		{"id":"2caf20acef2a24ae","type":"text","text":"# What's your story, Use your writing\n\n- [ ] bring all the stuff you've written on paper onto here\n- [ ] Start making a UI\n- [ ] start making boxes\n\t- [ ] then helpers\n- [ ] Then dataflow\n- [ ] come up with a huge name list, constantly talking to yourself\n- [ ] level all out, burying the details down, don't care","x":7252,"y":-596,"width":434,"height":406},
		{"id":"5ccfe5ed2ebfd8c5","type":"text","text":"# Imagine making a DP in 4 minutes page\n\n#say-you-want-to\n\nTotes in spirit of your\nCharts/Hogwarts hompages\n\nWhat 4 things you'd want to drop on them serially?\n\nThat's your story\n\nIn fact that's what you wanted to do with Backtracking\n\n\nGo on make the static page, animate them later. Use whatever you can use to AI automate, with the environment guilt\n\n\n**The best way to learn something is to teach it. To tell a story. To anthromosphise if needed**\n\n\n** FILL OUT THOSE GRAPHICS, WALKING TALKING TO YOURSELF**","x":7614,"y":-743,"width":296,"height":686,"color":"3"},
		{"id":"0ea7a2f27b0b3e4c","type":"link","url":"https://www.figma.com/proto/gmmY6RWuStZm4WTh0Gpyv2/tria_leshp?node-id=1-34&t=mZ68zVK8sb2aL8WZ-1","x":7868,"y":-989,"width":1021,"height":2600},
		{"id":"2718e00891706c27","type":"text","text":"# GRAPHICS","x":7769,"y":-218,"width":250,"height":60,"color":"5"},
		{"id":"899517168877d284","type":"text","text":"#awesome #story-idea #i-like","x":7290,"y":-114,"width":270,"height":130},
		{"id":"081aa68aa5d7c32f","type":"text","text":"# The program to anim API LOL\n\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _","x":7178,"y":2019,"width":426,"height":940},
		{"id":"98f231d99b01b237","type":"text","text":"# UI Pimp-ups","x":5246,"y":2658,"width":381,"height":837},
		{"id":"2a76babb128555b9","type":"text","text":"# Fix and Handle Mission: Program Example: Function calls\n\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _","x":5806,"y":2837,"width":442,"height":995},
		{"id":"41b7f3eef6a9a701","type":"text","text":"# Fix and Handle Mission: Program Example: Function with external custom Input\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _","x":6325,"y":2832,"width":442,"height":995},
		{"id":"37bbbd52286087e4","type":"text","text":"# Fix and Handle Mission: Program Example: *Recursive* function calls\n\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _","x":6851,"y":2807,"width":442,"height":995},
		{"id":"51e83f35a878ff2e","type":"file","file":"_I the Mindful Consciousness/_files/Saraswati Maa 2.jpg","x":7970,"y":-1801,"width":749,"height":741},
		{"id":"295e394b1a75901e","type":"text","text":"# Sample Spool Items, aka STATE, \n\n```preview\npath: Lumber/Creations, actual digi ones, metadata for real world ones/z_ashes/_current_tria_leshp/tria_leshp_svelte_v0.3/src/data/sample_spool.json\n```\n","x":1500,"y":1648,"width":203,"height":167,"color":"2"},
		{"id":"19139b1dc889ebb4","type":"file","file":"Lumber/Creations, actual digi ones, metadata for real world ones/z_ashes/_current_tria_leshp/app_src_files.excalidraw.md","x":734,"y":1539,"width":680,"height":455},
		{"id":"8d50c6d302a30ee7","type":"text","text":"# The Template Spool Reel: tiny UI start to Breathe\n\n\n- [x] ensure the spool updates things as expected ✅ 2024-08-11\n\t- [x] debug ✅ 2024-08-11\n- [x] pass the spool props onto them ✅ 2024-08-11\n- [x] Start adding spool template elements, Just plain boxes: vars like array, output/res, and areas like input, mode, temp. ✅ 2024-08-11\n\n--- \n\n- [x] keep a global steps list and show it on bottom and add prev next buttons that update the spool index and update template ✅ 2024-08-11\n- [x] pass it one by one to template, make its props so ✅ 2024-08-11\n- [x] ~~write~~  a small sample spool list **generate from the other end** as in the ast nodes themselves ✅ 2024-08-11\n\t- [x] easier than comping up with mock data from scratch ✅ 2024-08-11","x":914,"y":2742,"width":376,"height":717},
		{"id":"3359ed10cea30fdf","type":"text","text":"## Nodes are Spool, current spool item  \n- [x] get nodes of input program, instead of lines. Or maybe both. Extract/compute as much as you can ✅ 2024-08-09\n\t- [x] import acorn/babel for this ✅ 2024-08-09\n- [x] **Nodes are Spool v0.1** ✅ 2024-08-09\n- [x] make it global ✅ 2024-08-09\n\t- [x] and have a current spool index ✅ 2024-08-09\n\t- [x] prev and next buttons to update ... or just use the counter and bind the count globally! ✅ 2024-08-09\n\n## Context from the spool\n- okay now every node has to be excutes, recursively, while passing around a contex\n\t- [x] copu executeAST that does this, by looping over ast.body's nodes, and evaluating the heck out of them ✅ 2024-08-09\n\t\t- [x] rm doc.write\n- [x] congrats, You have incorporated base code\n- [x] LVL2: get full context list beford hand, just switch in it ✅ 2024-08-10\n- **This is the Custom Spool with all the Sparkles added in.**\n\n## Level in Spool Item\n- [ ] now also calc the level, so when you evaluate recursively, increase it => every spool item has an explicit `level` var as well\n\t- [x] recursive value logic thinking ... ✅ 2024-08-10\n\t- [x] rename executeAST => unspoolExecute, with a level arg. leave it at that ✅ 2024-08-10\n\t- [x] now try to actually flatten and show the level at every step ✅ 2024-08-10\n\t\t- [x] okay, really read what eavaluate is doing and returning ✅ 2024-08-10\n\t\t- [x] print statements ✅ 2024-08-10\n\t\t- [x] replace final spool push by one dedicated to every case ✅ 2024-08-10\n\t-  then try to filter by level depth\n\t\t- trivial, not needed as of yet\n- maybe you don't need the level in the end, but you do need stuff to happen at different levels, and recording an explciit value is just a start\n## Now for putting current state to use: STOP and EVALUATE context\n\n- you have full context list beford hand, just switch in it\n\t- that has already taken care of levels and messages and stuff\n- [x] formulate the evalute to just update a global spool thred ✅ 2024-08-11\n- [x] test ✅ 2024-08-11\n- [x] debug ✅ 2024-08-11\n\n## Vars (PLAYERS for the UI) from the Spool (then later relationships from the program text itself as well)\n- [x] first get it in the spool itself ✅ 2024-08-11\n- [ ] then extract this info out into a meta object. This will in future also hold their relationships to one another that we can deduce (eg i, j as pointers to another array variable hence are not full player elements themselves )\n- [ ] _\n- [ ] _\n\nNow we're ready for some UI and bare animation :)\n\n\n","x":505,"y":2101,"width":401,"height":1665},
		{"id":"a6a826d741d3f1c8","type":"text","text":"# The Template Spool Reel and META: *Think*\n\n\n- [ ] choose a small program, just expressions, no ifs or loops\n\t- [x] read it's tree ✅ 2024-08-06\n\t- [ ] follow  the path of evaluate, that's what makes the numbers affect.\n\t- [ ] then abstract it out\n\t\t- [ ] but only at certain points\n\t\t\t- [ ] take out evaluate as a helper, giving it it's memo\n\t- [ ] incorporate code in current svelte\n\t\t- [ ] mark helpers is ast code\n\t\t- [ ] add input block\n\t\t- [ ] decide where to show\n\t\t- [ ] _\n\t- [ ] collect all states along the way\n\t- [ ] practice unfurling it differently on different levels, mark state differently\n\t\t- [ ] _\n\t\t- [ ] _\n\t\t- [ ] _\n\t- [ ] here you have you frames spool\n\t- [ ] add any more things you need\n\t\t- [ ] _\n\t\t- [ ] _\n- [ ] read old programs\n- [x] Expressions/interaction in the state spool -> You need ASTs ✅ 2024-08-06\n\t- [x] watch AST video, understand its context and need to extract meaning from any src code ✅ 2024-08-06\n\t\t- [x] touch and explore an AST in an online tool ✅ 2024-08-06\n\t- [x] ASTs will not just give expressions, they'l give the scope (with values if evaluated) and the indent level too. You need to study them ✅ 2024-08-06\n\t- [x] Okay try thinking again what you exactly need on all those fronts ✅ 2024-08-06\n\t\t- [x] again come back to representation visual ✅ 2024-08-06\n\t\t- [x] **Need: unfurl everything, it's all a tree, but treat them differently** ✅ 2024-08-06\n\t\t- [x] **context passing evaluation understand** ✅ 2024-08-06\n- [x] Think about components needed. Again. And write out *yet another* scope. ✅ 2024-08-05\n- [x] Think about how Meta is different from Spool. ✅ 2024-08-05\n\t- [x] How much info it can handle instead of the spool ✅ 2024-08-05\n\t- [x] write out a meta ✅ 2024-08-05\n- [x] Think about the end story and animation and representation ✅ 2024-08-05\n\t- [x] rooms and portals and scope ✅ 2024-08-05\n\t- [x] Levels are ubiquitous ✅ 2024-08-05\n\t- [x] players ✅ 2024-08-05\n\t- [x] expressions are interactions between players ✅ 2024-08-05\n\t- [x] Unfurling the levels: is your CANVAS ✅ 2024-08-05\n- [x] Start from a frame. ✅ 2024-08-05\n\t- [x] ***You cannot hide.*** ✅ 2024-08-05","x":23,"y":2342,"width":433,"height":1402},
		{"id":"616dc19f70394894","type":"text","text":"use chatgpt like your junior developer to do the tedious work","x":2090,"y":1905,"width":284,"height":106,"color":"2"},
		{"id":"6e7cf8e7c66cbf2e","type":"text","text":"# Fancy Components handling Player interactions\n\n\n\n- [ ] _\n- [ ] _\n\n\n\n\n- [ ] make the array component fancier\n\t- [ ] and boxes, and len prop that can be shown\n\t- [ ] add hideable indexes\n\t- [ ] add hideable pointers \n- [ ] _\n- [ ] I and j pointers\n- [ ] substring activated\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _","x":3162,"y":2284,"width":397,"height":875,"color":"3"},
		{"id":"45565b3c333c78fa","type":"text","text":"# Expressions aka Player interactions aka the MAGIC\n\n\n- [ ] LVL2 or 1?: maybe worthwile to, so that it's easier to follow where in the code we are while going down exec levels, first \n\t- [ ] hook up an editor\n\t- [ ] that has start and end props\n\t- [ ] make em global and bind them to evaluate to see what's being done when\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _","x":2561,"y":2272,"width":391,"height":830,"color":"3"},
		{"id":"c8ab213319f89875","type":"text","text":"# Blocks: if blocks\n*Fix and Handle Mission: Program Example: If statements*\n\n- [x] Chronical the different types of statements on a board so you have an idea for how much planning needed ✅ 2024-08-15\n\t- [x] the types of AST parts ✅ 2024-08-15\n\t- [x] examples ✅ 2024-08-15\n\t\t- [x] more examples\n\t- [x] handlings ✅ 2024-08-15\n\t- [x] parts of the spool item ✅ 2024-08-15\n\t\t- [x] name all ✅ 2024-08-15\n\t\t- [x] only those which are static ✅ 2024-08-15\n- [ ] Rm static ones: try to simplify the current spool so you can spot the if condition better\n\t- [x] keep reading and learning for real the different parts of the AST\n\t- [x] rm the static part ✅ 2024-08-15\n\t\t- [x] players and their type, without their values ✅ 2024-08-15\n\t- [ ] filter top level stmts\n\t\t- [ ] Any questions?\n\t\t- [ ] _\n\t- [ ] follow how you're populating the new custom parts\n\t\t- [ ] array pushes should also show in diff\n\t\t- [ ] literal value how?\n\t\t- [ ] interactions how?\n\t- [ ] condense/bubble up useful info to top level statements, then ignore expression nodes  \n- [ ] add support for if expression\n\t- [ ] Sample if program\n\t- [ ] add if switch case\n\t- [ ] test\n\t- [ ] debug\n\t- [ ] next tasks\n- [ ] try to reflect a only the statements level stuff (filter spool based on what it is) keep the full spool just filter it\n\t- [ ] diff is not 100% correct (array.push for example) if it did it would a good indicator of what to reject ... huh what does this mean .... oh right the diff property, showing \"What changed'\"\n\t- [ ] so the ones inside if are level 1, but so are any tope level epxression literals. How do you differentiate? \n\t- [ ] _\n\t- [ ] _ \n\t- [ ] whare do you store the rules?\n\t- [ ] _\n\t- [ ] _\n\t- [ ] Show the state/check/mode somewhere on the UI\n\t- [ ] _\n\t- [ ] _\n- [ ] Once you've done that test with else too\n- [ ] Your work here is mostly donw\n- [ ]  see if you can alsoo do nested if blocks, ideally this should work regardless of depth\n- [ ] LVL2: set a global level limit to not let run any stupid way too nested programs","x":1736,"y":2267,"width":348,"height":1737},
		{"id":"5b3b6a95d95b42ae","type":"text","text":"# Fix and Handle Mission: Program Example: For and While Loops\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _\n\n\n- [ ] _\n- [ ] _","x":2115,"y":2262,"width":347,"height":861},
		{"id":"0225ac5cab4347b8","type":"text","text":"- in the code you move line by line\n- in the tree you move left to right\n- and you don't want to go further down some level, and only extract required infor\n- you might just go down anyway and trim and extract once you're down\n- okay you need an example, simple one, just expressions\n- [ ] okay so we need to find a way to make the UI know and show: **everytime we evaluate recursively** and how many levels deep.\n\t- the UI can look like anything, intially just a text will do too\n\t- [x] store levels info as well with the state, and update when eval called rec ✅ 2024-08-11\n\t\t- [x] also store what kind of expression and text it was ✅ 2024-08-11\n\t- [ ] _\n\t- [ ] _\n\t- [ ] _\n\t- [ ] _\n- might not need to make evaluate a helper\n- then just a slight UI update to keep seeing how I can marry this to my vision => go to next todo list","x":1362,"y":2236,"width":312,"height":674},
		{"id":"d9e43285da5a0973","type":"text","text":"# My own story for an algo\n\n with \n 1. Unfurling blocks,  \n 2. unfurling expressions, \n 3. messages, \n 4. fade in fade out sections,\n 5. and an extra canvas map view page linking to other future ones\n","x":4074,"y":2064,"width":439,"height":1106},
		{"id":"c7fe99fec3019156","type":"text","text":"# The AST, and making the STATE Spool - Reacting to different levels on the State spool \n\nyou already have the values at every level","x":1301,"y":2139,"width":1705,"height":78,"color":"2"},
		{"id":"0b9e19f90b3fa748","type":"text","text":"# Messages","x":3624,"y":2306,"width":330,"height":763},
		{"id":"6b791e7073e66698","type":"text","text":"## Vars (PLAYERS for the UI) from the Spool (then later relationships from the program text itself as well)\n- [x] first get it in the spool itself ✅ 2024-08-11\n- [ ] then extract this info out into a meta object. \n- [ ] This will in future also hold their relationships to one another that we can deduce. Eg\n\t- [ ] i, j as pointers to another array variable hence are not full player elements themselves\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _","x":2068,"y":2455,"width":342,"height":367},
		{"id":"9354747c2e833007","type":"text","text":"# There exist literal world builders and you're sturggling with your tiny project ","x":7091,"y":-870,"width":308,"height":99},
		{"id":"7f682fbcc4e3f51c","x":2922,"y":2727,"width":452,"height":1835,"color":"2","type":"text","text":"# Put some #anger  into it: What do you want to see in it? Not how you want to see yourself after making it. Not right now atleast.\n\n\n\n- [ ] #anger at why the heck devs think of themselves as so cool\n- [ ] they want to be all up about holding everything in their head\n- [ ] Well I wanna show them that it's not about that. It's about #learning \n- [ ] I wanna be like [[Rincewind, the Ultimate Only Sane Everyman.canvas|Rincewind]], and show what high and mighty fools they all are.\n- [ ] it's not easy, but I'll not stop keeping plucking at the mortar.\n- [ ] I'll keep plucking at the code\n- [ ] and if it doesn't come about, well I'll just run away off to somewhere.\n- [ ] The from is the important part not the to.\n- [ ] I don't wanna be in this state right now, so I'll keep going"},
		{"id":"e6f5ac9e93388f1d","x":2622,"y":3306,"width":376,"height":572,"type":"text","text":"# Anticipate, and Know your Environment and Brain as adversaries stopping you from completing this\n\n\n- [ ] _\n- [ ] _\n- [ ] _\n- [ ] _"}
	],
	"edges":[
		{"id":"255da08db7109bc6","fromNode":"ca7e1c6a47c55d11","fromSide":"right","toNode":"c9a0e2ff97d09ae0","toSide":"left","label":"item"},
		{"id":"3b78a59c80e0a3bc","fromNode":"ca7e1c6a47c55d11","fromSide":"right","toNode":"25210689c192bef1","toSide":"left","color":"1","label":"item"},
		{"id":"29ffd91e64e85c1d","fromNode":"a2497144037e1f04","fromSide":"bottom","toNode":"eb28d297c9dad52f","toSide":"top","color":"2","label":"function text"},
		{"id":"95b4f4b1eb3af1dc","fromNode":"eb28d297c9dad52f","fromSide":"bottom","toNode":"9bec5ad71eb38e89","toSide":"top","color":"2","label":"AST data, with all stmt data, tokens, vals, etc"},
		{"id":"4b46d51d63c06da2","fromNode":"9bec5ad71eb38e89","fromSide":"bottom","toNode":"ca7e1c6a47c55d11","toSide":"left","color":"2"},
		{"id":"14934f288efa35d2","fromNode":"a2497144037e1f04","fromSide":"right","toNode":"007e54a52fdd314a","toSide":"top","fromEnd":"arrow","color":"1"},
		{"id":"bdd351e16c8c9caa","fromNode":"c5a18b336ddbdf6f","fromSide":"right","toNode":"a2497144037e1f04","toSide":"left"},
		{"id":"af44df44d788368f","fromNode":"25210689c192bef1","fromSide":"right","toNode":"1c151be3eba3becb","toSide":"left","color":"6"},
		{"id":"3260fc622cba4ba5","fromNode":"25210689c192bef1","fromSide":"right","toNode":"57328441252f0c08","toSide":"left","color":"6"},
		{"id":"ecae08a6ec51053f","fromNode":"25210689c192bef1","fromSide":"right","toNode":"4adf49d1c2013b34","toSide":"left","color":"6"},
		{"id":"c9e67af79b6251f0","fromNode":"25210689c192bef1","fromSide":"right","toNode":"63da4c3f64d536ae","toSide":"left","color":"6"},
		{"id":"fa0d787da3faa146","fromNode":"25210689c192bef1","fromSide":"right","toNode":"6229b0e4640c7bcd","toSide":"left","color":"6"},
		{"id":"235892357764ffd9","fromNode":"8543f3c461e5eed4","fromSide":"right","toNode":"007e54a52fdd314a","toSide":"left","color":"6"},
		{"id":"05ecf3c6d3540212","fromNode":"8543f3c461e5eed4","fromSide":"right","toNode":"c9a0e2ff97d09ae0","toSide":"left"},
		{"id":"6f9d280f84b70a60","fromNode":"8543f3c461e5eed4","fromSide":"right","toNode":"25210689c192bef1","toSide":"left"},
		{"id":"0a35b798655f5bdd","fromNode":"5b3b6a95d95b42ae","fromSide":"right","toNode":"d9e43285da5a0973","toSide":"left"}
	]
}